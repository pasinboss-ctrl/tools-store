import PostCard, { type Post } from "@/components/PostCard";
import Pagination from "@/components/Pagination";
import { qContentList } from "@/sanity/lib/queries";
import { sanity } from "@/sanity/lib/client";
import { urlFor } from "@/sanity/lib/image"; 
import type { Image as SanityImage } from "sanity"; 

type ContentData= {
  id:number ; 
  title: string; 
  "slug": string; 
  tag: string;
  desc: string;
  fulldesc : string;
  banner?: SanityImage;
  date: string;
};


/*const rawContent = await sanity.fetch<ContentData[]>(qContentList);

const allPosts: Post[] = rawContent
    .filter(p => p.banner) // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    .map((p) => ({
        slug: p.slug,
        title: p.title,
        // Assumption: PostCard component uses 'excerpt' for the short description, 
        // so we map 'fulldesc' (‡∏´‡∏£‡∏∑‡∏≠ p.desc ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á 'excerpt'
        excerpt: p.fulldesc, 
        tag: p.tag,
        cover: urlFor(p.banner!).url(), 
        date : p.date,
        // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏° property 'read' ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° Post type
        //read: "3 ‡∏ô‡∏≤‡∏ó‡∏µ", // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
    }));

console.log("GROQ qContentListpage >>>\n", qContentList);
console.log("slug URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á:", allPosts[0]?.slug);    
*/
/*
const allPosts: Post[] = [
  {
    slug: "air-compressor-checklist",
    title: "5 ‡πÄ‡∏ä‡πá‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏±‡πä‡∏°‡∏•‡∏°",
    excerpt: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡∏±‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ CFM ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏£‡∏á‡∏•‡∏°‡∏ï‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á",
    cover: "/content/air-compressor-checklist.jpg",
    tag: "CHECKLIST",
    read: "2 ‡∏ô‡∏≤‡∏ó‡∏µ",
    date: "2025-09-01",
  },
  {
    slug: "engine-oil-grade",
    title: "‡πÄ‡∏Å‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞",
    excerpt: "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏∑‡∏î SAE ‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤",
    cover: "/content/engine-oil-grade.jpg",
    tag: "TIPS",
    read: "4 ‡∏ô‡∏≤‡∏ó‡∏µ",
    date: "2025-08-20",
  },
  {
    slug: "drill-selection-guide",
    title: "‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ß‡πà‡∏≤‡∏ô: ‡πÑ‡∏£‡πâ‡∏™‡∏≤‡∏¢ vs ‡∏™‡∏≤‡∏¢‡πÑ‡∏ü",
    excerpt: "‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏£‡∏á‡∏ö‡∏¥‡∏î ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û",
    cover: "/content/drill-selection-guide.jpg",
    tag: "GUIDE",
    read: "3 ‡∏ô‡∏≤‡∏ó‡∏µ",
    date: "2025-08-05",
  },
];
*/
function filterPosts(q: string, tag: string, posts: Post[]): Post[] { // üëà ‡∏£‡∏±‡∏ö Array ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
 return posts.filter(p =>
  (q ? (p.title + p.excerpt).toLowerCase().includes(q.toLowerCase()) : true) &&
  (tag ? (p.tag ?? "").toLowerCase() === tag.toLowerCase() : true)
 );
}


export default async function BlogIndex({ 
    searchParams 
}: { 
    searchParams: { [key: string]: string | string[] | undefined } | Promise<{ [key: string]: string | string[] | undefined }> // Type ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Promise ‡πÉ‡∏ô Next.js 15
}) {
    // ‡∏ï‡πâ‡∏≠‡∏á await ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
    const resolvedSearchParams = await searchParams; // <--- **‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**

    // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ resolvedSearchParams ‡πÅ‡∏ó‡∏ô
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á q ‡πÅ‡∏•‡∏∞ tag ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° Type
    const q = (Array.isArray(resolvedSearchParams?.q) ? resolvedSearchParams.q[0] : resolvedSearchParams?.q) ?? "";
    const tag = (Array.isArray(resolvedSearchParams?.tag) ? resolvedSearchParams.tag[0] : resolvedSearchParams?.tag) ?? "";
    
    // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:
    const page = Math.max(
        1, 
        parseInt(resolvedSearchParams?.page?.toString() ?? "1", 10) || 1
    );

  const pageSize = 9; // üëà fixed

  // 2. üí° ‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    const rawContent = await sanity.fetch<ContentData[]>(qContentList); // üëà await ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    
    // üí° 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î allPosts ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (Local Variable)
    const allPosts: Post[] = rawContent
        .filter(p => p.banner) 
        .map((p) => ({
            slug: p.slug,
            title: p.title,
            excerpt: p.fulldesc, 
            tag: p.tag,
            cover: urlFor(p.banner!).url(), 
            date : p.date,
        }));
    
    // 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ filterPosts ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á allPosts ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ

  const filtered = filterPosts(q, tag, allPosts); 
  //const filtered = filterPosts(q, tag);
  const total = filtered.length;
  const start = (page - 1) * pageSize;
  const slice = filtered.slice(start, start + pageSize);

  //const tags = Array.from(new Set(allPosts.map(p => p.tag).filter(Boolean))) as string[];
  const tags = Array.from(new Set(allPosts.map(p => p.tag).filter(Boolean))) as string[];

  return (
    <main className="mx-auto max-w-7xl px-4 py-10 text-white">
      <h1 className="text-2xl md:text-3xl font-bold">‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</h1>

    
      <form className="mt-4 grid gap-3 md:grid-cols-3">
        <input
          name="q"
          defaultValue={q}
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°..."
          className="rounded-xl bg-[#1f1f1f] border border-gray-800 px-3 py-2 outline-none focus:border-orange-500"
        />
        <select
          name="tag"
          defaultValue={tag}
          className="rounded-xl bg-[#1f1f1f] border border-gray-800 px-3 py-2 outline-none focus:border-orange-500"
        >
          <option value="">‡∏ó‡∏∏‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</option>
          {tags.map(t => <option key={t} value={t}>{t}</option>)}
        </select>
        <button className="rounded-xl bg-orange-600 text-black font-semibold px-4 py-2 hover:bg-orange-500" type="submit">
          ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        </button>
      </form>

      {/* Grid */}
      <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5">
        {slice.map(p => <PostCard key={p.slug} p={p} />)}
      </div>

      {/* Pagination */}
      <Pagination totalItems={total} pageSize={pageSize} currentPage={page} />
    </main>
  );
}
